# ASCII 코드
# 미국의 표준 문자 코드로 7bit(0~127)로 하나의 문자를 표현
# ASCII 코드는 통신성 기본 문자 코드로 사용되고 있음
# 16진수로 표현되있음 = 0x
#(특징)
# 1. 프린트 가능한 문자는 총95개 나머지 33개는 프린트 불가능한 문자
# 프린트 가능한 문자는 0x20(space)부터 시작 0x7E(126)까지 출력가능
# 2, 숫자는 0x30(0) ~ 0x39(9)까지 10개의 코드
# 3, 영문 대문자는 0x41(65) = "A" 부터 0x5A(90)="Z"
# 4, 영문 소문자는 0x61(97) = "a" 부터 0x7A(122)="z"
# 5, ASCII 코드는 문자나 , 숫자로 표현이가능한 코드 
#
# 숫자를 문자(ASCII)로 변경하는 함수 : chr()  -> 이안에 숫자를 넣으면 문자로 출력해줌 
# : chr() : "()"안에 ASCII 코들를 입력하면 문자로 출력.
# print(chr(0x41))        # 해당 숫자의 16진수 
# print(chr(65))          # 해당 숫자의 번호 


# 문제 'A' ~ 'Z' 까지의 임의 문자 3개를 출력하는 코드를 작성하세요
# from random import random,randint
# for x in range(3) :
#     a = (randint(65,90))
#     print(chr(a),end=" ")
# print()

# from random import random,randint
# for x in range(3):
#     ch = int(random()*26)+65                # ch = randint(65,90)
#     print(chr(ch),end=" ")                    # 숫자범위를 지정해놓고 그걸 변형을 시킨다 숫자로도 가능,
# print()




# 자료형 
# LIST 자료형             LIST 가 가장만이 쓰임 = 시퀸스 자료형이라고도 함(자료형들끼리는 비슷한데 각자만의 특성에 따라 차이점은 존재함)
# List 자료형이란 ?                                 # = 변수를 지정한다고 보는거랑 같다 
# - 데이터 목록을 다루는 자료함  - 어느위치에 무엇이 있다 
# - 리스트 정의할 때는 "[]"를 사용함 = 대괄호를 사용하는 데이터가 있다면 리스트 
# - 리스트 안에는 어떤 종류의 자료형이든, 상관없이 저장 가능   = 무엇이든 들어갈수 있다
#
# list 자료형의 기본 사용
# 
# ( 정의 = 선언 )
# 변수명 = []                                       # 비어있는 리스트 생성 
# 변수명 = [value1,value2,value3, ....]             # 여러개의 값들을 집어넣고 초기의 값을 설정할수 있음 

# List() 를 이용한 리스트 생성
# 변수면 = list()                # 비어있는 리스트를 생성
# 변수명 = list("Hello")         # ['H','e','l','l','o']         - 문자열을 하나하나 분리해서 저장 
# 변수먕 = list(range(5))        # [0.1.2.3.4]

# 예제1 
# lst = [1,2,3,4,5,6,7,8,9]
# print(lst,type(lst))





# # index와 병합,확장에 데한 예제
# # 리스트의 특정 값을 참조하는 방법 : indexing 
# # 인덱싱은 "index" 값을 사용하여 특정멤버를 출력할수 있게 해줌
# # indext값은 리스트의 멤버의 순서번호로 시작은 0부터..
lst = [1,2,3,4,5,6,7,8]                                                 # 변수를 지정해주고 
#index 0 1 2 3 4 5 6 7
# print(lst[0])  #  = 1 숫자 출력                                         # 변수의 위치를 index값으로 출력하고
# print(lst[6])  #  = 7           
# # 인덱싱을 이용한 list 값 변경  
# lst[0] = lst[5]                                                         # 특정 변수를 다른값으로 변경하고
# print(lst[0])                                                           # 바꾼 변수를 출력하고
# print(lst)                                                              # 전체를 출력하면 바뀐값이 나온다 
#  1  =>    6 
# 리스트 자료의 길이 : Len() => 요소[멤버]의 개수를 변환하는 함수 Len
# print("lst의 길이는  : " ,len(lst)) #  lst안에 있는 멤버의 개수를 나타냄
# 리스트 자료형의 결합1(병합)               
lst2 = [9,10]
print(lst+lst2)                             # 더하기를 하면 나열해서 병합시켜줌
lst3 = lst + lst2                           # 새로운 변수를 만들어서 새로운변수를 출력하는 방법
print() 
print(lst3)                                 # 미리 더해준다음에 출력해줄수 있음
print()
# 리스트 자료형의 결합2(확장)
lst = lst +lst2                             # 기존에 있는 변수를 더해서 나타내는 방법        # lst  = [6,2,3,4,5,6,7,8,9,10]
print(lst)
# 리스트 자료형의 반복
print(lst2*3)                               # lst2의 자료를 3번 반복해 나타냄  [9,10,9,10,9,10]
# max(), min()
# lst  = [6,2,3,4,5,6,7,8,9,10]
print(max(lst))                             # max = 리스트 중 가장 큰값을 출력
print(min(lst))                             # min = 리스트 중 가장 작은값 출력
# print(sum(lst))                             # sum = 리스트 내 숫자를 합함



# 변수를 선언 3개의 정수를 입력받아 출력하는 코딩 
# 출력 결과 => "합계 = xx" < "합계"라는 문자열도 변수 처리
# a = int(input("첫번째 정수 입력 : "))
# b = int(input("두번쨰 :"))
# c = int(input("세번째 정수: "))
# d = "합계"
# sum = a + b + c
# print("%s = %s " %(d,sum))

# # list 사용시
# list = [0,0,0,"합계"]                                                                       # 초기값을 설정한다
# list[0] = int(input("첫번쨰 정수 입력 :"))                                                  # 첫번째 초기값
# list[1] = int(input("첫번쨰 정수 입력 :"))  
# list[2] = int(input("첫번쨰 정수 입력 :"))
# sum = list[0] + list[1] + list[2]
# print(" %s = %s" %(list[3],sum))

# LIST 인덱싱
# : index 값을 이용한 참조 즉 해당 위치 list[]를 불러온다
#
# list =        [1,2,3,4,5,6,7,8,9,10]  
# 양의 인덱스 :  0 1 2 3 4 5 6 7 8 9                                                            # 왼쪽에서 0부터 시작
# 음의 인덱스 :-10-9-8-7-6-5-4-3-2-1                                                            # 오른쪽 -1부터 내려감

# list =        [1,2,3,4,5,6,7,8,9,10]  
# # (+)          0 1 2 3 4 5 6 7 8 9
# # (-)        -10 9 8 7 6 5 4 3 2 1 
# print('list[]',list)                                                                           # index에는 음의 위치와 양의 위치가 있음
# print('list[-1]',list[-1])                                                                     # 10
# print('list[-2]',list[-2])                                                                     # 9
# print('list[-3]',list[-3])                                                                     # 8












# slicing 방식을 이용한 시퀸스 객체(자료) 접근                                                  # 큰덩어리를 잘라낸 모양
# slicing 이란? 
# : 리스트와 같은 시퀸스 자료값들의 범위로 접근하기 위해서사용하는 방법으로
#   시퀸스 객체(자료)의 일부분을 잘라서 새롭게 생성하는 것을 의미
#   식빵을 먹고싶은 부분만 잘라내서 가져간다 - 잘라가져간다고 전체가 사라지진 않는다 
#   인덱스 값을 이용해 slicing 즉 자료를 어디부터 자를지 정할수 있다
#
#   (형식)
#   변수명 [시작인덱스 : 끝인덱스]                                                              # 대괄호 사용
#   변수면 [시작인덱스 : 끝인덱스 : 증감값 ]                                                    # range와 비슷 증가 or 감소
#   
#  예제1)
# list = [1,2,3,4,5,6]
#   index 0 1 2 3 4 5 
#    (-)  6 5 4 3 2 1 
#
# list[0:3]                                                                                     # [1,2,3]       =  range와 비슷하게 미만의 값을 출력 
# list[0:3:2]                                                                                   # [1,3]
# 
#
# 예제 2)
# # ＊ slicing을 이용한 리스트 에 대한 접근
# list = [ 1,2,3,4,5,6]
# print(list[0:3])                                                                                # 즉 자르고 싶은 부분은 : 콜론을 사용해서 범위를 나타낸다 ＊ 대괄호 필수
# print(list[0:3:2])
# print(list[5:0:-3])                                                                             # [6,3]

# # slicing의 인덱스 값 생략                                                                      # range와 비슷
# print(list[:3])                                                                                 # = range(3) 시작값을 생략해서 맨앞에서 3까지
# print(list[3:])                                                                                 # 끝값이 없으면 시작부분부터 맨~~끝까지 전부 출력 [4,5,6]

# # slicing 후에 새로운 리스트 생성방법
# slc = list[3:6]                                                                                 # 끝을 정하고 싶으면 넣어주면 되고 아니면 그냥 생략하면 된다 
# print(slc)
# slc2 = list[1:5:3]                                                                              # [2,5]
# slc3 = list[5::-1]                                                                              # [6,5,4,3,2,1]
# slc4 = list[-3:-1]                                                                              # [4,5]        종료값은 포함 x
# print("slc2 : %s" "\n" "slc3 : %s " "\n" "slc4 : %s" %(slc2,slc3,slc4) )









# list의 함수들 ..
# : list 자료형에 대한 처리를 하는 함수들 이라고 봄 
# 1) append(value)                                              : 리스트 끝에 값을 추가(멤버들 추가)   - 한번에 통째로 추가함
#  
# 2) expand(iter(시퀸스자료 = 즉 리스트라고 보면됨))             :  리스트 끝에 list,tutple, dict의 값을 하나씩 추가함  -  각 시퀸스 자료형을 하나씩 멤버를 띠어내서 추가함

# 3) insert(idx,vaule)                                          : idx = 인덱스위치, value = 집어 넣을 값 : 인덱스에 있는 위치에 특정값을 추가하는 함수 

#  4) pop([idx])                                                : 인덱스를 지정하지 않으면,  마지막 인덱스 값을 반환후 삭제
#                        pop : 어떠한값을 빼내고 반환하고 삭제  : 인덱스를 지정햇다면 ,해당 인덱스값을 반환후 삭제

# 5) remove(vaule)                                              : 리스트 내의 특정 값을 찾아서 삭제하는 함수

# 6) clear()                                                    : 리스트의 모든 멤버를 삭제하고 빈 리스트로 만들어줌 

# 7) count(value)                                               : 리스트 내에 특정 값의 개수를 반환하는 함수  ex ) 3개의 리스트를 개수를 찾고 반환해줌 

# 8)index(value)                                                : 리스트 내에 특정 값의 인덱스값을 반환하는 함수 

# 9)reverse()                                                   : 리스트의 멤버의 순서를 역으로 뒤집어서 나열후 출력해줌 

#10) sort([reverse=False])                                      : 리스트의 값을 오름차순(False), (reverse=False는 False는 생략이 가능하지만 True는 생략이 안되서 써주어야함)

#                                                                               내림차순(True)으로 정렬해주는 함수





# list 함수들의 형식 예 )
# 1, append()  : 리스트의 끝에 값을 추가
list = [1,2,3,4,5]                                                  # list= 객체 
list.append('1,2,3,4,5')                                            # 변수명 쓰고 . 찍고 ()안에 불러올 함수 입력
print(list)
list.append([9,10])                                                 
print(list)                                                         # [1,2,3,4,5,'a',[9,10]]
print(list[-1])                                                     # 정수 실수 문자 다 들어가는데 여기서 리스트안에 리스트가 덩어리로 추가된거 즉 [9,10]

# 2, extend(iter) : 리스트 뒤에 추가할 (리스트,tuple,dict 자료의 멤버들을 추가함 )
list = [1,2,3,4,5,6,7,8]
list.extend(['a','b','c','d','e','f'])                              # append 는 리스트안에 리스트가 덩어리로 있다면 
print(list)                                                         # extend 는 리스트안에 덩어리를 풀어서 리스트에 먹어버린다  [1,23,4,5,6,7,8,a,b,c,d,e,f]

# 3, insert(idx,value)
list = [1,2,3,4,5]
list.insert(3,'a')                                                  # 양수는 그 idx 위치의 오른쪽에 포함시킴
list.insert(-3,'a')                                                 # 음수는 그 idx 우치의 왼쪽에 포함시킴
print(list)

# 4, pop()
list = [1,2,3,4,5]
a = list.pop()                                                      # a = list.pop()=> 5 , a= 5
print(a)                                                            # pop([])  - 위치를 지정하지 않으면 마지막 숫자 5를 빼서 변수에 저장함
print(list)
b = list.pop(2)                                                     # 위치를 지정해주면 그 위치의 숫자를 삭제 
print(b)
print(list)

# 5, remove() : 괄호안에잇는 특정 숫자에 있는 내용을 검색 후 삭제    # (＊ 주의 ------ 위치 idx 삭제가 아니라 제일 첫번째 위치한 숫자를 하나만 삭제함 )
list = [1,2,3,4,5,2,4,6,3,2]
list.remove(2)                                                      # 첫번째 2를 삭제
print(list)
list.remove(2)                                                      # 두번째 2를 삭제
print(list)
list.remove(2)                                                      # 세번째 2를 삭제
print(list)
# list.remove(2)                                                      # list안에 4번째 2는 없기에 value 에러가 뜸 
# print(list)


# 6, clear()
list = [1,2,3,4,5]
list.clear()
print(list)                                                         # [] 전부 삭제