#               ※    비트 연산자 (논리연산자가 갖고있는걸 비슷하게 사용하지만 bit결가값으로 변환)
# : 두 피연산자의 bit값을 가지고 연산하며 참과 거짓으로 안나오고 값의 1의 부분을 더해서 나타냄
#
# "&" : 두 피연산자의 and bit 연산하는 연산자.
#                    128    64  32  16  8   4   2   1
#       10 & 6 => 10=  0    0   0   0   1   0   1   0   # 2진수 8비트로 나타냄
#                & 6=  0    0   0   0   0   1   1   0   
#                   =================================
#                      0    0   0   0   0   0   1   0   # 1의 값은 2  
# EX)
# print(10&6)
# print()
# "|" : 역슬러스 두 피연산자의 or bit 연산하는 연산자 
#                    128    64  32  16  8   4   2   1
#       10 | 6 => 10=  0    0   0   0   1   0   1   0   # 2진수 8비트로 나타냄
#                | 6=  0    0   0   0   0   1   1   0   
#                   =================================
#                      0    0   0   0   1   1   1   0   # 1의 값은 14 
# EX)
# print(10|6)
# "~" : 우측 피연산자에 대한 not bit 연산                 # 컴터는 빼기가 안되기에 보수라는 걸 사용함 
#                    128    64  32  16  8   4   2   1
#          ~ 0 => 10=  0    0   0   0   0   0   0   0   # 
#                   =================================          
#                      1    1   1   1   1   1   1   1   # "1의 값은 -1" (1의 "보수"관계를 이용해 0의 값을 맞추는 보수를 사용해 값을나타냄)
#                    └>(=사인드 비트 = 양수면 음수 ,음수면 양수로 표현)
# EX)
# print(~0)
#  "^" : 두 피연산자에 대한 XOR(베타적 논리합) BIT 연산하는 연산자
#        이 두 연산자를 사용하여 암호화에 주로 사용이 됨, (암호화는 키값을 이용해 복잡하게 만든다 키 = 비번, 복호화는 키값을 집어넣고 베타적 논리합으로 다시 복구)
#        두 피연사자 중에 하나가 "참"이면 -> "참"
#        그런데 두 피연산자가 둘다 "참" 또는 "거짓"이면 "거짓"을 반환
#                    128    64  32  16  8   4   2   1
#       10 ^ 6 => 10=  0    0   0   0   1   0   1   0   # 
#                ^ 6=  0    0   0   0   0   1   1   0   
#                   =================================
#                      0    0   0   0   1   1   0   0   # 1의 값은 12 
# ex )  평문 - >  1 0 1 0 1 1 1 1 
#    )   key - >  1 0 1 0 1 0 1 0 
#                  0 0 0 0  0 1  0 1
# print(10 ^ 2)

#           ※ shift(이동) 연산자
#   "<<" : 왼쪽 피연산자의 비트를 오른쪽 연산자의 값 만큼 이동 (왼쪽으로)
#                       
#                    128    64  32  16  8   4   2   1
#       10 << 2 => 10=  0    0   0   0   1   0   1   0   # 비트를 이용한 2의 배수관계로 곱셈 
#                  <<    
#                   =================================
 #                      0   0   1   0   1   0   0   0       # 1의 값은 40

#   ">>" : 왼쪽 피연산자의 비트를 오른쪽 연산자의값 만큼 이동 (오른쪽으로)
#                    128    64  32  16  8   4   2   1
#       10 << 4 =>10=  0    0   0   0   1   0   1   0   # 비트를 이용한 2의 배수관계를 정수 나눗셈
#                   >>
#                   =================================
#                      0    0   0   0   0   0   1   0   # 1의 값은 2
# print(10<<2) 
# print(10>>2)




#           ※ 기타 연산자
#    "="   : 대입 연산자 = > 왼쪽 피연산자에 오른쪽 피연산자를 대입
#   (복합 대입 연산자)
#    : 복합 대입 연산자란? 대입 연산자와 산술 연산자를 합쳐서 사용하는 연산자
#   "+=" , "-=" , "*=" , "/=" ... 등 산술연산자 + 대입연산자 
#    : 산술계산후 대입한다는 의미
# a =  0
# a += 10  # a = a + 10  - > a = 10  # a의 값을 대입하고 나온 값을 바로 대입연산처리함 
# a -= 5   # a = a - 5  - > a = 5
# print(a)
# a *= 5   # a = a * 5  - > a = 25
# print(a)
# a //= 5 # a = a // 5  - > a = 5  (정수부분만 나타냄)
# print(a)
# a %= 3  # a = a % 3  - >  a = 2 (실수부분만)
# print(a)
# a /= 2   # a = a / 5  - > a = 1.0 
# print(a)

# 문제] 다음에 대한 답을 적으세요 
# 1) 7 > 18 참 or 거짓 ?  f
# print(7 > 18)
# # 2) 5<2 참 or 거짓?    f
# print(5<2)
# # 3) 6 % 3 > 2 참 or 거짓? f
# print(6 % 3 > 2)
# # 4) 5+5 != 2*5 참 or 거짓? f
# print(5+5 != 2*5) 
# # 5) True == 1 참 or 거짓? T
# print(True == 1) 
# # 6) 1 == '1' 참 or 거짓? f
# print(1 == "1") 
# # 7) 10 // 3 == 10 % 3  참 or 거짓? f
# print(10 // 3 == 10 % 3)
# # 8) 15 % 4 in (0,1,2) 참 or 거짓? f
# print(15 % 4 in (0,1,2))



#                   조건문(if) 파이썬엔 if 밖에 없음
# if ( 조건분기문 )
#   - 조건식이 참인 경우에는 if의 종속문장을 실행해 특정내용을 실행해줌
#   - 참이 아닌 경우에는 if 종속문장은 실행하지 않음
#   - if 종속문장을 작성할 경우, "반드시"☆☆☆☆ tab을 통해서 들어쓰기 하자!! (들여쓰기 라인이 같아야 같은 블럭처리됨 잘못하면 인디테이션 오류뜸) 
#
#  (형식)
# if(조건문):     "콜론이 들어감" 
#   if 종속문장1        - =들여쓰기 필요

#   if 종속문장2
#   ...
# (메인 프로그램 실행 코듬)

# if 들여쓰기 잘못된 예 
# num = int(input("정수 입력 :"))
# if num == 1: #(콜롬이 나오면 if 종속문장 입력 필요 ) #if값이 숫자 1 이라면.. 들여쓰기 안한상태임
# print("1입력")  # 오류 - indentationError 뜸 = 들여쓰기 잘못했을떄 
# if 들여쓰기 정상적으로 한 예
# num = int(input("정수 입력 :"))
# if num == 1:
#         print("1입력")  # 이게 if의 종속문장임


# 1,  if EX) 입력값을 받아서 홀수/짝수 구문하는 예제 
# num1 = int(input("정수 입력 :"))
# if num1%2 == 0: # 짝수 이거나 2의 배수인 경우  나누엇을떄 그값이 0으로 딱 떨어질떄
#     print("num1 의 변수값은 짝수 입니다.!!")
#     print("num1 의 변수 값은 2의 배수 입니다.!!")
# if num1%2 == 1: # 홀수
#     print("num1의 변수 값은 홀수 입니다.!!!")
# print("프로그램 종료")

# 2, if EX) 메뉴 선택시 동작을 시키는 프로그램 # 1, 방어, 헬멧 , 해드셋 
# print("\t\t===== 메뉴 =====")
# print("\n\t 1. Easy Game start ")
# print("\n\t 2. Hard Game start ")
# print("\n\t 3. Exit ")
# num2 = int(input("번호 입력 >>> : "))
# if num2 == 1:
#     print("Easy Game starting...")
# if num2 == 2:
#     print("Hard Game starting...")
# if num2 == 3:
#     print("Game Exit...")


# 3, if Ex)입력값을 받아서 입력값이 1이면, "1입력"을 출력
#           10보다 큰 값을 입력하면, "10보다 큰 값을 입력했습니다"
#           10보다 작은 값을 입력하면, "10 보다 작은 값을 입력했습니다"
# num1 = int(input("정수 입력 : "))
# if num1 == 1:
#     print("1입력")  
# if num1 > 10:
#     print("10보다 큰 값을 입력했습니다")
# if num1 != 1 and num1 < 10:
#     print("10 보다 작은 값을 입력했습니다")


# # 4, if Ex) 멤버 연산자와 식별 연산자를 이용한 if
# x = 11
# if x in (10,11,15):
#     print("x변수의 값은 Members에 가입 되어 있습니다.")
# if type(x) is int:
#     print("x변수의 값은 int형 자료 입니다")

#   if ~  else 조건 구문    (각 if문장은 하나씩 하나씩 개별적인데 else 를 이용하여 하나의 if구문에 2개의 실행을 넣음)
#       : if조건문에 대헤서 참이면 , if 조건문의 종속문장을 실행하고
#         거짓이면 else 종속문장을 실행한다 

#   (형식)                      if부분이 거짓이면 else를 실행
# if (조건식):
#       if종속문장1
#       if종속문장2
#       ...
# else:
#       else종속문장1
#       else종속문장2
#       ...
# (메인프로그램 실행코드)

# if ~ else 예제)  입력값을 받아서 입력값이 10 보다 크고, 15보다 작은 경우
#       "10보다 크고 15보다 작은 값 입력". 이외의 모든 값에 대헤서는
#       "범위를 벗어난 값 입력!!" 출력하는 예제
# num1 = int(input(" 정수 입력 : "))
# if num1 > 10 and num1 < 15 :                        # 두개다 만족해야 실행하겠다 = and 
#     print("10보다 크고 15보다 작은 값 입력")
# else :                                              # else 의 범위는 따로 필요 없는건가? 그냥 저값이 안나오면 바로 다음이 출력되는거겠지??
#     print("범위를 벗어난 값 입력!!")

# if ~ else 예제 ) 수를 입력 받아 100이면 "100입력", 이외에는 "100이외의 값 입력"

# num1 = int(input(" 정수 입력 : "))
# if num1 == 100 :
#     print("100입력")
#     pass                                # 100 입력시 출력내용
# else :
#     print("100이외의 값 입력")


# pass 명령어 
#       : if나 함수 등 종속문장을 사용하여 정의, 기술해야 하는 경우
#          해당 내용을 나중에 정의하고자 하는 목적으로 사용하는 명령어 
#       : 종속문장이 없다면 error 뜸, 
 

#        if 문제 1 ) 
# 1, 입력 받은 데이터가 3의 배수인 경우 출력하는 코드 작성 
# 2, 절대값 구하는 프로그램을 만드세요 

# num1 = int(input("정수 입력 : "))
# if num1 % 3 == 0 :
#         print("입력하신 {}3의 배수입니다".format(num1))
# else :
#         print("입력하신 {}는 3의 배수가 아닙니다".format(num1))

# num2 = int(input("정수 입력 : "))
# if num2 < 0 : num2 = -(num1); 
#         print("입력값의 절대값은 {}".format(num2)
# else :
#         print("입력값의 절대값은 {}입니다".format(num2))
