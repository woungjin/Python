# ※ 파이썬에서 사용하는 진수 변환 함수
# - bit() : 주어진  값을 2진수로 변환 표현
# - oct() : 주어진 값을 8진수로 변환 표현
# - hex() : 주어진 값을 10진수로 변환 표현

# ※ 변환함수 ex)
# print(bin(123))         # 0b1111011
# print(oct(0b1111011))   # 0o173
# print(hex(0o173))       # 0x7b  

# ※ 파이썬 내장함수(기본적으로 가지고 있는 함수)
# 1, 최대값을 구하는 max()
# -> print(max(10,4,-7,5,13))           # 13
# 2, 최소값을 구하는 min()
# -> print(min(10,4,-7,5,13))           # 7
# 3, 주어진 값의 합을 구하는 sum()
# -> print(sum([10,4,-7]))               # 대괄호 포함
# 4, 제곱승수 값을 구하는  pow()    
# -> print(pow(10,3))                    # 10의 3승
# 5, 나누기를 구하는 divmod()             #소수점x 몫o 
# -> print(divmod(10,3))                 # (3,1) => (몫, 나머지)


# ※서식문자 
# -> 문자열에서 특정 값을 표현 하는 문자 약식 
# 
#   C언어   파이썬3       설명
# 1, %s       {}        문자열을 출력
# 2, %d       {}        정수를 출력
# -> %6d      {:6}      6자리 고정자리 출력
# 3,          {:b}      표현식(=0b) 없는 2진수 값 출력 (표현식 생략)
# 4, %o       {:o}      표현식(=0o) 없는 8진수 값 출력
# 5, %h       {:X}      표현식(=0x) 없는 16진수 값 출력
# 6, %f       {:f}      실수 출력 (c언어에선 소수점 6자리까지 출력)
# -> %.2f     {:.2f}    소수점 2자리까지 출력  (=서식문자의 확장v)

# 문자열과 정수 출력 
# print("%s : %d" %('나이',30))                 # "오류" c언어 방식 → %S(문자열) %s(서식문자)
# print('{} : {}'.format('나이',30))            # . = 직접참조연산


# 실수 출력
# print("%f, %.2f" % (1.1234,1.1234))           #   c언어 
# print("{:f}, {:.2f}".format(1.1234,1.1234))   #   파이썬

# ＊ 진수 출력 ex)
# print("%o, %x, %X"% (10,10,10))                 # 소문자,대문자 구분
# print("{:b}, {:o}".format(10,10))
# print("{:x}, {:X}".format(10,10))



# ＊ 고정길이 출력 (=0숫자b)
# print('|%5d|' %123)                           # 숫자 =오른쪽 정렬(=c)     
# print('|%5s|' %'abc')
# print('|{:5}|'.format(123))
# print('|{:4}|'.format('abc'))                   # 문자 = 왼쪽 정렬

# 고정길이 출력2(정렬) .양수 = 오른쪽 , 음수 = 왼쪽
# print('|%-5d|' %123)                    # c언어
# print('|%5s|' %'abc')

# print('|{:<5}|'.format(123))                 # x < 숫자 왼쪽
# print('|{:>5}|'.format('abc'))               # x > 숫자 오른쪽 
# print('|{:^5}|'.format('abc'))               # ^ = 가운데 정렬

# 고정길이 출력3 여백 채우기
# print("|%05d|" % 123)                        # 비어있는 여백을 숫자 0으로 채움 
# print("|{:05d}|".format(123))
# print("|{:1>5}|".format('123'))
# print("|{:_<5}|".format('123'))




# 정수 실수 단위 구분
# print("{:,}".format(100000))            # 정수든 실수든 상관x ex) , = 정수만 단위를 구분해줌, 문자 = x 
# print("{:,.1f}".format(1000000))

# ＊ 연습문제
# print("%20s" %('파이썬 쇼핑몰'))
# print("\n{:2} : {:<58}".format('번호',107871855))                                           #  파이썬 
# print("%s : %s" %("주소","서울지 종로구 종로3가"))                                           # c언어 
# print("성명 : %s" %("김사장"))                                                              # c언어  
# print("전화 : %s" %("070-1234-5678"))                                                      # c언어 
# print("-"*50)
# print("%8s%10s%8s%10s" %("품명","단가","수량","금액"))                                      # c언어
# print("-"*50)
# print("%10s" %("블루투스 이어폰"),"{:7,}".format(85000) ,"%6d" %1 ,"{:12,}".format(85000))  # (c,파이썬) - 어지럽지만 확실하게 눈에 보이게 
# print("%13s{:12,}%7d{:13,}".format(8000,8000) %("USB3.0 8G",1))                            # (c,파이썬) - 보기쉽게 정리
# print("-"*50)
# print("%s" %("소 계"),"{:39,}".format(93000))
# print("-"*50)   
# print("%s" %("청구금액"),"{:36,}".format(93000))                                            # (c,파이썬) - 컴마를 붙인것
# print("%s%37s" %("받은금액","100.000"))
# print("%s%37.3f" %("거스름돈",7))                                                           # (c,실수) - 실수로 컴마를 붙인것
# print("-"*50)

# print("%13s{:11,}%10d{:12,}".format(8000,8000) %("USB3.0 8G",1))                            # c+파이썬 정리
# print("%13s%11s%10s%12s" %("USB3.0 8G","8,000","1","8,000"))                    


#       ＊ 변수 (variable) 
#        -> 1, 다양한 데이터를 저장하는 공간(메모리)
#        -> 2, 저장한값은 언제든지 다시 사용이 가능하고, 경우에 따라서 기존의 데이터를 덮어 씌울수도 있다 (변경가능)
#        -> 3, 프로그램이 동작할떄는 변수x  ex) 주머니에 무엇을 담느냐에 따라 변한다 저장공간일뿐

#       ＊ 변수의 명명법 (작명 규칙)
#        -> 1, 영문자, 숫자, 언더바(_)로 구성됨(한글도 가능)           - 특수문자 x 
#        -> 2, 영문 대소문자는 구분 
#               ex) sum, Sum. sUm. suM, SUM       - 다 다른변수
#        -> 3, 변수명의 시작은 문자의 언더바를 사용(맨앞에 숫자는 X) 
#        -> 4, 변수명에 띄어쓰기 X 
#               EX) str name  = > x    <-> str_name(O)
#        -> 5, python 예약어는 사용이 불가능 
#               EX) 프로그램이 미리 사용하고 있는 언어(단어) = 명령어들(명렁어들은 소문자)..
 
#       ＊ 변수의 정의(형식)
#        -> 변수명 = 값(하나의 변수 처리)
#        -> 변수명1 , 변수명2 = 값1 , 값2  
#        -> 변수명1 = 변수명2 = 값1 

x = 10 # 변수의 선언
y = 20
z = x + y
print('{} + {} = {}'.format(x,y,z))